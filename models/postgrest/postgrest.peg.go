package postgrest

// Code generated by peg postgrest.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQueryString
	ruleQueryParam
	ruleLimit
	ruleOffset
	ruleOrder
	ruleFilter
	ruleOrderOptions
	ruleOrderOption
	ruleColumnName
	ruleOrderDirection
	ruleNullDirection
	rulePredicate
	ruleNot
	ruleOperator
	ruleAnyAll
	ruleOperand
	ruleListOperand
	ruleListOperandItem
	ruleVectorOperand
	ruleVectorOperandItem
	ruleQuotedString
	ruleEscapedChar
	ruleScalarOperand
	ruleInteger
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"QueryString",
	"QueryParam",
	"Limit",
	"Offset",
	"Order",
	"Filter",
	"OrderOptions",
	"OrderOption",
	"ColumnName",
	"OrderDirection",
	"NullDirection",
	"Predicate",
	"Not",
	"Operator",
	"AnyAll",
	"Operand",
	"ListOperand",
	"ListOperandItem",
	"VectorOperand",
	"VectorOperandItem",
	"QuotedString",
	"EscapedChar",
	"ScalarOperand",
	"Integer",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type PostgrestParser struct {
	Buffer string
	buffer []rune
	rules  [26]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *PostgrestParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *PostgrestParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *PostgrestParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *PostgrestParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *PostgrestParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *PostgrestParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*PostgrestParser) error {
	return func(p *PostgrestParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*PostgrestParser) error {
	return func(p *PostgrestParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *PostgrestParser) Init(options ...func(*PostgrestParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 QueryString <- <(QueryParam? ('&' QueryParam)* END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleQueryParam]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
			l4:
				{
					position5, tokenIndex5 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l5
					}
					position++
					if !_rules[ruleQueryParam]() {
						goto l5
					}
					goto l4
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleQueryString, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 QueryParam <- <(Limit / Offset / Order / Filter)> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[ruleLimit]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleOffset]() {
						goto l10
					}
					goto l8
				l10:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleOrder]() {
						goto l11
					}
					goto l8
				l11:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[ruleFilter]() {
						goto l6
					}
				}
			l8:
				add(ruleQueryParam, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 2 Limit <- <('l' 'i' 'm' 'i' 't' '=' Integer)> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if buffer[position] != rune('l') {
					goto l12
				}
				position++
				if buffer[position] != rune('i') {
					goto l12
				}
				position++
				if buffer[position] != rune('m') {
					goto l12
				}
				position++
				if buffer[position] != rune('i') {
					goto l12
				}
				position++
				if buffer[position] != rune('t') {
					goto l12
				}
				position++
				if buffer[position] != rune('=') {
					goto l12
				}
				position++
				if !_rules[ruleInteger]() {
					goto l12
				}
				add(ruleLimit, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 3 Offset <- <('o' 'f' 'f' 's' 'e' 't' '=' Integer)> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				if buffer[position] != rune('o') {
					goto l14
				}
				position++
				if buffer[position] != rune('f') {
					goto l14
				}
				position++
				if buffer[position] != rune('f') {
					goto l14
				}
				position++
				if buffer[position] != rune('s') {
					goto l14
				}
				position++
				if buffer[position] != rune('e') {
					goto l14
				}
				position++
				if buffer[position] != rune('t') {
					goto l14
				}
				position++
				if buffer[position] != rune('=') {
					goto l14
				}
				position++
				if !_rules[ruleInteger]() {
					goto l14
				}
				add(ruleOffset, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 4 Order <- <('o' 'r' 'd' 'e' 'r' '=' OrderOptions)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				if buffer[position] != rune('o') {
					goto l16
				}
				position++
				if buffer[position] != rune('r') {
					goto l16
				}
				position++
				if buffer[position] != rune('d') {
					goto l16
				}
				position++
				if buffer[position] != rune('e') {
					goto l16
				}
				position++
				if buffer[position] != rune('r') {
					goto l16
				}
				position++
				if buffer[position] != rune('=') {
					goto l16
				}
				position++
				if !_rules[ruleOrderOptions]() {
					goto l16
				}
				add(ruleOrder, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 5 Filter <- <(ColumnName '=' Predicate)> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				if !_rules[ruleColumnName]() {
					goto l18
				}
				if buffer[position] != rune('=') {
					goto l18
				}
				position++
				if !_rules[rulePredicate]() {
					goto l18
				}
				add(ruleFilter, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 6 OrderOptions <- <(OrderOption (',' OrderOption)*)> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				if !_rules[ruleOrderOption]() {
					goto l20
				}
			l22:
				{
					position23, tokenIndex23 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l23
					}
					position++
					if !_rules[ruleOrderOption]() {
						goto l23
					}
					goto l22
				l23:
					position, tokenIndex = position23, tokenIndex23
				}
				add(ruleOrderOptions, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 7 OrderOption <- <((ColumnName '.' OrderDirection '.' NullDirection) / (ColumnName '.' (OrderDirection / NullDirection)) / ColumnName)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if !_rules[ruleColumnName]() {
						goto l27
					}
					if buffer[position] != rune('.') {
						goto l27
					}
					position++
					if !_rules[ruleOrderDirection]() {
						goto l27
					}
					if buffer[position] != rune('.') {
						goto l27
					}
					position++
					if !_rules[ruleNullDirection]() {
						goto l27
					}
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleColumnName]() {
						goto l28
					}
					if buffer[position] != rune('.') {
						goto l28
					}
					position++
					{
						position29, tokenIndex29 := position, tokenIndex
						if !_rules[ruleOrderDirection]() {
							goto l30
						}
						goto l29
					l30:
						position, tokenIndex = position29, tokenIndex29
						if !_rules[ruleNullDirection]() {
							goto l28
						}
					}
				l29:
					goto l26
				l28:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleColumnName]() {
						goto l24
					}
				}
			l26:
				add(ruleOrderOption, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 8 ColumnName <- <(QuotedString / (!('=' / '&' / ',' / '.') .)+)> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				{
					position33, tokenIndex33 := position, tokenIndex
					if !_rules[ruleQuotedString]() {
						goto l34
					}
					goto l33
				l34:
					position, tokenIndex = position33, tokenIndex33
					{
						position37, tokenIndex37 := position, tokenIndex
						{
							position38, tokenIndex38 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l39
							}
							position++
							goto l38
						l39:
							position, tokenIndex = position38, tokenIndex38
							if buffer[position] != rune('&') {
								goto l40
							}
							position++
							goto l38
						l40:
							position, tokenIndex = position38, tokenIndex38
							if buffer[position] != rune(',') {
								goto l41
							}
							position++
							goto l38
						l41:
							position, tokenIndex = position38, tokenIndex38
							if buffer[position] != rune('.') {
								goto l37
							}
							position++
						}
					l38:
						goto l31
					l37:
						position, tokenIndex = position37, tokenIndex37
					}
					if !matchDot() {
						goto l31
					}
				l35:
					{
						position36, tokenIndex36 := position, tokenIndex
						{
							position42, tokenIndex42 := position, tokenIndex
							{
								position43, tokenIndex43 := position, tokenIndex
								if buffer[position] != rune('=') {
									goto l44
								}
								position++
								goto l43
							l44:
								position, tokenIndex = position43, tokenIndex43
								if buffer[position] != rune('&') {
									goto l45
								}
								position++
								goto l43
							l45:
								position, tokenIndex = position43, tokenIndex43
								if buffer[position] != rune(',') {
									goto l46
								}
								position++
								goto l43
							l46:
								position, tokenIndex = position43, tokenIndex43
								if buffer[position] != rune('.') {
									goto l42
								}
								position++
							}
						l43:
							goto l36
						l42:
							position, tokenIndex = position42, tokenIndex42
						}
						if !matchDot() {
							goto l36
						}
						goto l35
					l36:
						position, tokenIndex = position36, tokenIndex36
					}
				}
			l33:
				add(ruleColumnName, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 9 OrderDirection <- <(('a' 's' 'c') / ('d' 'e' 's' 'c'))> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				{
					position49, tokenIndex49 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l50
					}
					position++
					if buffer[position] != rune('s') {
						goto l50
					}
					position++
					if buffer[position] != rune('c') {
						goto l50
					}
					position++
					goto l49
				l50:
					position, tokenIndex = position49, tokenIndex49
					if buffer[position] != rune('d') {
						goto l47
					}
					position++
					if buffer[position] != rune('e') {
						goto l47
					}
					position++
					if buffer[position] != rune('s') {
						goto l47
					}
					position++
					if buffer[position] != rune('c') {
						goto l47
					}
					position++
				}
			l49:
				add(ruleOrderDirection, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 10 NullDirection <- <(('n' 'u' 'l' 'l' 's' 'f' 'i' 'r' 's' 't') / ('n' 'u' 'l' 'l' 's' 'l' 'a' 's' 't'))> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				{
					position53, tokenIndex53 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l54
					}
					position++
					if buffer[position] != rune('u') {
						goto l54
					}
					position++
					if buffer[position] != rune('l') {
						goto l54
					}
					position++
					if buffer[position] != rune('l') {
						goto l54
					}
					position++
					if buffer[position] != rune('s') {
						goto l54
					}
					position++
					if buffer[position] != rune('f') {
						goto l54
					}
					position++
					if buffer[position] != rune('i') {
						goto l54
					}
					position++
					if buffer[position] != rune('r') {
						goto l54
					}
					position++
					if buffer[position] != rune('s') {
						goto l54
					}
					position++
					if buffer[position] != rune('t') {
						goto l54
					}
					position++
					goto l53
				l54:
					position, tokenIndex = position53, tokenIndex53
					if buffer[position] != rune('n') {
						goto l51
					}
					position++
					if buffer[position] != rune('u') {
						goto l51
					}
					position++
					if buffer[position] != rune('l') {
						goto l51
					}
					position++
					if buffer[position] != rune('l') {
						goto l51
					}
					position++
					if buffer[position] != rune('s') {
						goto l51
					}
					position++
					if buffer[position] != rune('l') {
						goto l51
					}
					position++
					if buffer[position] != rune('a') {
						goto l51
					}
					position++
					if buffer[position] != rune('s') {
						goto l51
					}
					position++
					if buffer[position] != rune('t') {
						goto l51
					}
					position++
				}
			l53:
				add(ruleNullDirection, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 11 Predicate <- <(Not? ((Operator '.' Operand) / (Operator '(' AnyAll ')' '.' ListOperand)))> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position57, tokenIndex57 := position, tokenIndex
					if !_rules[ruleNot]() {
						goto l57
					}
					goto l58
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
			l58:
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[ruleOperator]() {
						goto l60
					}
					if buffer[position] != rune('.') {
						goto l60
					}
					position++
					if !_rules[ruleOperand]() {
						goto l60
					}
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if !_rules[ruleOperator]() {
						goto l55
					}
					if buffer[position] != rune('(') {
						goto l55
					}
					position++
					if !_rules[ruleAnyAll]() {
						goto l55
					}
					if buffer[position] != rune(')') {
						goto l55
					}
					position++
					if buffer[position] != rune('.') {
						goto l55
					}
					position++
					if !_rules[ruleListOperand]() {
						goto l55
					}
				}
			l59:
				add(rulePredicate, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 12 Not <- <('n' 'o' 't' '.')> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				if buffer[position] != rune('n') {
					goto l61
				}
				position++
				if buffer[position] != rune('o') {
					goto l61
				}
				position++
				if buffer[position] != rune('t') {
					goto l61
				}
				position++
				if buffer[position] != rune('.') {
					goto l61
				}
				position++
				add(ruleNot, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 13 Operator <- <([a-z] / [A-Z])+> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				{
					position67, tokenIndex67 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l68
					}
					position++
					goto l67
				l68:
					position, tokenIndex = position67, tokenIndex67
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l63
					}
					position++
				}
			l67:
			l65:
				{
					position66, tokenIndex66 := position, tokenIndex
					{
						position69, tokenIndex69 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l70
						}
						position++
						goto l69
					l70:
						position, tokenIndex = position69, tokenIndex69
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l66
						}
						position++
					}
				l69:
					goto l65
				l66:
					position, tokenIndex = position66, tokenIndex66
				}
				add(ruleOperator, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 14 AnyAll <- <(('a' 'n' 'y') / ('a' 'l' 'l'))> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				{
					position73, tokenIndex73 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l74
					}
					position++
					if buffer[position] != rune('n') {
						goto l74
					}
					position++
					if buffer[position] != rune('y') {
						goto l74
					}
					position++
					goto l73
				l74:
					position, tokenIndex = position73, tokenIndex73
					if buffer[position] != rune('a') {
						goto l71
					}
					position++
					if buffer[position] != rune('l') {
						goto l71
					}
					position++
					if buffer[position] != rune('l') {
						goto l71
					}
					position++
				}
			l73:
				add(ruleAnyAll, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 15 Operand <- <(VectorOperand / ScalarOperand)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				{
					position77, tokenIndex77 := position, tokenIndex
					if !_rules[ruleVectorOperand]() {
						goto l78
					}
					goto l77
				l78:
					position, tokenIndex = position77, tokenIndex77
					if !_rules[ruleScalarOperand]() {
						goto l75
					}
				}
			l77:
				add(ruleOperand, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 16 ListOperand <- <('{' ListOperandItem (',' ListOperandItem)* '}')> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				if buffer[position] != rune('{') {
					goto l79
				}
				position++
				if !_rules[ruleListOperandItem]() {
					goto l79
				}
			l81:
				{
					position82, tokenIndex82 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l82
					}
					position++
					if !_rules[ruleListOperandItem]() {
						goto l82
					}
					goto l81
				l82:
					position, tokenIndex = position82, tokenIndex82
				}
				if buffer[position] != rune('}') {
					goto l79
				}
				position++
				add(ruleListOperand, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 17 ListOperandItem <- <(QuotedString / (!(',' / '}' / '&' / '=') .)+)> */
		func() bool {
			position83, tokenIndex83 := position, tokenIndex
			{
				position84 := position
				{
					position85, tokenIndex85 := position, tokenIndex
					if !_rules[ruleQuotedString]() {
						goto l86
					}
					goto l85
				l86:
					position, tokenIndex = position85, tokenIndex85
					{
						position89, tokenIndex89 := position, tokenIndex
						{
							position90, tokenIndex90 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l91
							}
							position++
							goto l90
						l91:
							position, tokenIndex = position90, tokenIndex90
							if buffer[position] != rune('}') {
								goto l92
							}
							position++
							goto l90
						l92:
							position, tokenIndex = position90, tokenIndex90
							if buffer[position] != rune('&') {
								goto l93
							}
							position++
							goto l90
						l93:
							position, tokenIndex = position90, tokenIndex90
							if buffer[position] != rune('=') {
								goto l89
							}
							position++
						}
					l90:
						goto l83
					l89:
						position, tokenIndex = position89, tokenIndex89
					}
					if !matchDot() {
						goto l83
					}
				l87:
					{
						position88, tokenIndex88 := position, tokenIndex
						{
							position94, tokenIndex94 := position, tokenIndex
							{
								position95, tokenIndex95 := position, tokenIndex
								if buffer[position] != rune(',') {
									goto l96
								}
								position++
								goto l95
							l96:
								position, tokenIndex = position95, tokenIndex95
								if buffer[position] != rune('}') {
									goto l97
								}
								position++
								goto l95
							l97:
								position, tokenIndex = position95, tokenIndex95
								if buffer[position] != rune('&') {
									goto l98
								}
								position++
								goto l95
							l98:
								position, tokenIndex = position95, tokenIndex95
								if buffer[position] != rune('=') {
									goto l94
								}
								position++
							}
						l95:
							goto l88
						l94:
							position, tokenIndex = position94, tokenIndex94
						}
						if !matchDot() {
							goto l88
						}
						goto l87
					l88:
						position, tokenIndex = position88, tokenIndex88
					}
				}
			l85:
				add(ruleListOperandItem, position84)
			}
			return true
		l83:
			position, tokenIndex = position83, tokenIndex83
			return false
		},
		/* 18 VectorOperand <- <('(' VectorOperandItem (',' VectorOperandItem)* ')')> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if buffer[position] != rune('(') {
					goto l99
				}
				position++
				if !_rules[ruleVectorOperandItem]() {
					goto l99
				}
			l101:
				{
					position102, tokenIndex102 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l102
					}
					position++
					if !_rules[ruleVectorOperandItem]() {
						goto l102
					}
					goto l101
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
				if buffer[position] != rune(')') {
					goto l99
				}
				position++
				add(ruleVectorOperand, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 19 VectorOperandItem <- <(QuotedString / (!(',' / ')' / '&' / '=') .)+)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				{
					position105, tokenIndex105 := position, tokenIndex
					if !_rules[ruleQuotedString]() {
						goto l106
					}
					goto l105
				l106:
					position, tokenIndex = position105, tokenIndex105
					{
						position109, tokenIndex109 := position, tokenIndex
						{
							position110, tokenIndex110 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l111
							}
							position++
							goto l110
						l111:
							position, tokenIndex = position110, tokenIndex110
							if buffer[position] != rune(')') {
								goto l112
							}
							position++
							goto l110
						l112:
							position, tokenIndex = position110, tokenIndex110
							if buffer[position] != rune('&') {
								goto l113
							}
							position++
							goto l110
						l113:
							position, tokenIndex = position110, tokenIndex110
							if buffer[position] != rune('=') {
								goto l109
							}
							position++
						}
					l110:
						goto l103
					l109:
						position, tokenIndex = position109, tokenIndex109
					}
					if !matchDot() {
						goto l103
					}
				l107:
					{
						position108, tokenIndex108 := position, tokenIndex
						{
							position114, tokenIndex114 := position, tokenIndex
							{
								position115, tokenIndex115 := position, tokenIndex
								if buffer[position] != rune(',') {
									goto l116
								}
								position++
								goto l115
							l116:
								position, tokenIndex = position115, tokenIndex115
								if buffer[position] != rune(')') {
									goto l117
								}
								position++
								goto l115
							l117:
								position, tokenIndex = position115, tokenIndex115
								if buffer[position] != rune('&') {
									goto l118
								}
								position++
								goto l115
							l118:
								position, tokenIndex = position115, tokenIndex115
								if buffer[position] != rune('=') {
									goto l114
								}
								position++
							}
						l115:
							goto l108
						l114:
							position, tokenIndex = position114, tokenIndex114
						}
						if !matchDot() {
							goto l108
						}
						goto l107
					l108:
						position, tokenIndex = position108, tokenIndex108
					}
				}
			l105:
				add(ruleVectorOperandItem, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 20 QuotedString <- <('"' (EscapedChar / (!('"' / '&' / '=') .))* '"')> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				if buffer[position] != rune('"') {
					goto l119
				}
				position++
			l121:
				{
					position122, tokenIndex122 := position, tokenIndex
					{
						position123, tokenIndex123 := position, tokenIndex
						if !_rules[ruleEscapedChar]() {
							goto l124
						}
						goto l123
					l124:
						position, tokenIndex = position123, tokenIndex123
						{
							position125, tokenIndex125 := position, tokenIndex
							{
								position126, tokenIndex126 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l127
								}
								position++
								goto l126
							l127:
								position, tokenIndex = position126, tokenIndex126
								if buffer[position] != rune('&') {
									goto l128
								}
								position++
								goto l126
							l128:
								position, tokenIndex = position126, tokenIndex126
								if buffer[position] != rune('=') {
									goto l125
								}
								position++
							}
						l126:
							goto l122
						l125:
							position, tokenIndex = position125, tokenIndex125
						}
						if !matchDot() {
							goto l122
						}
					}
				l123:
					goto l121
				l122:
					position, tokenIndex = position122, tokenIndex122
				}
				if buffer[position] != rune('"') {
					goto l119
				}
				position++
				add(ruleQuotedString, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 21 EscapedChar <- <('\\' .)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				if buffer[position] != rune('\\') {
					goto l129
				}
				position++
				if !matchDot() {
					goto l129
				}
				add(ruleEscapedChar, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 22 ScalarOperand <- <(!('&' / '=') .)+> */
		func() bool {
			position131, tokenIndex131 := position, tokenIndex
			{
				position132 := position
				{
					position135, tokenIndex135 := position, tokenIndex
					{
						position136, tokenIndex136 := position, tokenIndex
						if buffer[position] != rune('&') {
							goto l137
						}
						position++
						goto l136
					l137:
						position, tokenIndex = position136, tokenIndex136
						if buffer[position] != rune('=') {
							goto l135
						}
						position++
					}
				l136:
					goto l131
				l135:
					position, tokenIndex = position135, tokenIndex135
				}
				if !matchDot() {
					goto l131
				}
			l133:
				{
					position134, tokenIndex134 := position, tokenIndex
					{
						position138, tokenIndex138 := position, tokenIndex
						{
							position139, tokenIndex139 := position, tokenIndex
							if buffer[position] != rune('&') {
								goto l140
							}
							position++
							goto l139
						l140:
							position, tokenIndex = position139, tokenIndex139
							if buffer[position] != rune('=') {
								goto l138
							}
							position++
						}
					l139:
						goto l134
					l138:
						position, tokenIndex = position138, tokenIndex138
					}
					if !matchDot() {
						goto l134
					}
					goto l133
				l134:
					position, tokenIndex = position134, tokenIndex134
				}
				add(ruleScalarOperand, position132)
			}
			return true
		l131:
			position, tokenIndex = position131, tokenIndex131
			return false
		},
		/* 23 Integer <- <[0-9]+> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l141
				}
				position++
			l143:
				{
					position144, tokenIndex144 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l144
					}
					position++
					goto l143
				l144:
					position, tokenIndex = position144, tokenIndex144
				}
				add(ruleInteger, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 24 END <- <!.> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				{
					position147, tokenIndex147 := position, tokenIndex
					if !matchDot() {
						goto l147
					}
					goto l145
				l147:
					position, tokenIndex = position147, tokenIndex147
				}
				add(ruleEND, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
	}
	p.rules = _rules
	return nil
}
