package postgrest

// Code generated by peg postgrest.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQueryString
	ruleQueryParam
	ruleFilter
	ruleColumnName
	rulePredicate
	ruleNot
	ruleOperator
	ruleAnyAll
	ruleOperand
	ruleListOperand
	ruleListOperandItem
	ruleVectorOperand
	ruleVectorOperandItem
	ruleQuotedString
	ruleEscapedChar
	ruleScalarOperand
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"QueryString",
	"QueryParam",
	"Filter",
	"ColumnName",
	"Predicate",
	"Not",
	"Operator",
	"AnyAll",
	"Operand",
	"ListOperand",
	"ListOperandItem",
	"VectorOperand",
	"VectorOperandItem",
	"QuotedString",
	"EscapedChar",
	"ScalarOperand",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type PostgrestParser struct {
	Buffer string
	buffer []rune
	rules  [18]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *PostgrestParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *PostgrestParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *PostgrestParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *PostgrestParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *PostgrestParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *PostgrestParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*PostgrestParser) error {
	return func(p *PostgrestParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*PostgrestParser) error {
	return func(p *PostgrestParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *PostgrestParser) Init(options ...func(*PostgrestParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 QueryString <- <(QueryParam? ('&' QueryParam)* END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleQueryParam]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
			l4:
				{
					position5, tokenIndex5 := position, tokenIndex
					if buffer[position] != rune('&') {
						goto l5
					}
					position++
					if !_rules[ruleQueryParam]() {
						goto l5
					}
					goto l4
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleQueryString, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 QueryParam <- <Filter> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				if !_rules[ruleFilter]() {
					goto l6
				}
				add(ruleQueryParam, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 2 Filter <- <(ColumnName '=' Predicate)> */
		func() bool {
			position8, tokenIndex8 := position, tokenIndex
			{
				position9 := position
				if !_rules[ruleColumnName]() {
					goto l8
				}
				if buffer[position] != rune('=') {
					goto l8
				}
				position++
				if !_rules[rulePredicate]() {
					goto l8
				}
				add(ruleFilter, position9)
			}
			return true
		l8:
			position, tokenIndex = position8, tokenIndex8
			return false
		},
		/* 3 ColumnName <- <(!('=' / '&') .)+> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				{
					position14, tokenIndex14 := position, tokenIndex
					{
						position15, tokenIndex15 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l16
						}
						position++
						goto l15
					l16:
						position, tokenIndex = position15, tokenIndex15
						if buffer[position] != rune('&') {
							goto l14
						}
						position++
					}
				l15:
					goto l10
				l14:
					position, tokenIndex = position14, tokenIndex14
				}
				if !matchDot() {
					goto l10
				}
			l12:
				{
					position13, tokenIndex13 := position, tokenIndex
					{
						position17, tokenIndex17 := position, tokenIndex
						{
							position18, tokenIndex18 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l19
							}
							position++
							goto l18
						l19:
							position, tokenIndex = position18, tokenIndex18
							if buffer[position] != rune('&') {
								goto l17
							}
							position++
						}
					l18:
						goto l13
					l17:
						position, tokenIndex = position17, tokenIndex17
					}
					if !matchDot() {
						goto l13
					}
					goto l12
				l13:
					position, tokenIndex = position13, tokenIndex13
				}
				add(ruleColumnName, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 4 Predicate <- <(Not? ((Operator '.' Operand) / (Operator '(' AnyAll ')' '.' ListOperand)))> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[ruleNot]() {
						goto l22
					}
					goto l23
				l22:
					position, tokenIndex = position22, tokenIndex22
				}
			l23:
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[ruleOperator]() {
						goto l25
					}
					if buffer[position] != rune('.') {
						goto l25
					}
					position++
					if !_rules[ruleOperand]() {
						goto l25
					}
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[ruleOperator]() {
						goto l20
					}
					if buffer[position] != rune('(') {
						goto l20
					}
					position++
					if !_rules[ruleAnyAll]() {
						goto l20
					}
					if buffer[position] != rune(')') {
						goto l20
					}
					position++
					if buffer[position] != rune('.') {
						goto l20
					}
					position++
					if !_rules[ruleListOperand]() {
						goto l20
					}
				}
			l24:
				add(rulePredicate, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 5 Not <- <('n' 'o' 't' '.')> */
		func() bool {
			position26, tokenIndex26 := position, tokenIndex
			{
				position27 := position
				if buffer[position] != rune('n') {
					goto l26
				}
				position++
				if buffer[position] != rune('o') {
					goto l26
				}
				position++
				if buffer[position] != rune('t') {
					goto l26
				}
				position++
				if buffer[position] != rune('.') {
					goto l26
				}
				position++
				add(ruleNot, position27)
			}
			return true
		l26:
			position, tokenIndex = position26, tokenIndex26
			return false
		},
		/* 6 Operator <- <([a-z] / [A-Z])+> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				{
					position32, tokenIndex32 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l33
					}
					position++
					goto l32
				l33:
					position, tokenIndex = position32, tokenIndex32
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l28
					}
					position++
				}
			l32:
			l30:
				{
					position31, tokenIndex31 := position, tokenIndex
					{
						position34, tokenIndex34 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l35
						}
						position++
						goto l34
					l35:
						position, tokenIndex = position34, tokenIndex34
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l31
						}
						position++
					}
				l34:
					goto l30
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
				add(ruleOperator, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 7 AnyAll <- <(('a' 'n' 'y') / ('a' 'l' 'l'))> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				{
					position38, tokenIndex38 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l39
					}
					position++
					if buffer[position] != rune('n') {
						goto l39
					}
					position++
					if buffer[position] != rune('y') {
						goto l39
					}
					position++
					goto l38
				l39:
					position, tokenIndex = position38, tokenIndex38
					if buffer[position] != rune('a') {
						goto l36
					}
					position++
					if buffer[position] != rune('l') {
						goto l36
					}
					position++
					if buffer[position] != rune('l') {
						goto l36
					}
					position++
				}
			l38:
				add(ruleAnyAll, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 8 Operand <- <(VectorOperand / ScalarOperand)> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				{
					position42, tokenIndex42 := position, tokenIndex
					if !_rules[ruleVectorOperand]() {
						goto l43
					}
					goto l42
				l43:
					position, tokenIndex = position42, tokenIndex42
					if !_rules[ruleScalarOperand]() {
						goto l40
					}
				}
			l42:
				add(ruleOperand, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 9 ListOperand <- <('{' ListOperandItem (',' ListOperandItem)* '}')> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				if buffer[position] != rune('{') {
					goto l44
				}
				position++
				if !_rules[ruleListOperandItem]() {
					goto l44
				}
			l46:
				{
					position47, tokenIndex47 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l47
					}
					position++
					if !_rules[ruleListOperandItem]() {
						goto l47
					}
					goto l46
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
				if buffer[position] != rune('}') {
					goto l44
				}
				position++
				add(ruleListOperand, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 10 ListOperandItem <- <(QuotedString / (!(',' / '}' / '&' / '=') .)+)> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				{
					position50, tokenIndex50 := position, tokenIndex
					if !_rules[ruleQuotedString]() {
						goto l51
					}
					goto l50
				l51:
					position, tokenIndex = position50, tokenIndex50
					{
						position54, tokenIndex54 := position, tokenIndex
						{
							position55, tokenIndex55 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l56
							}
							position++
							goto l55
						l56:
							position, tokenIndex = position55, tokenIndex55
							if buffer[position] != rune('}') {
								goto l57
							}
							position++
							goto l55
						l57:
							position, tokenIndex = position55, tokenIndex55
							if buffer[position] != rune('&') {
								goto l58
							}
							position++
							goto l55
						l58:
							position, tokenIndex = position55, tokenIndex55
							if buffer[position] != rune('=') {
								goto l54
							}
							position++
						}
					l55:
						goto l48
					l54:
						position, tokenIndex = position54, tokenIndex54
					}
					if !matchDot() {
						goto l48
					}
				l52:
					{
						position53, tokenIndex53 := position, tokenIndex
						{
							position59, tokenIndex59 := position, tokenIndex
							{
								position60, tokenIndex60 := position, tokenIndex
								if buffer[position] != rune(',') {
									goto l61
								}
								position++
								goto l60
							l61:
								position, tokenIndex = position60, tokenIndex60
								if buffer[position] != rune('}') {
									goto l62
								}
								position++
								goto l60
							l62:
								position, tokenIndex = position60, tokenIndex60
								if buffer[position] != rune('&') {
									goto l63
								}
								position++
								goto l60
							l63:
								position, tokenIndex = position60, tokenIndex60
								if buffer[position] != rune('=') {
									goto l59
								}
								position++
							}
						l60:
							goto l53
						l59:
							position, tokenIndex = position59, tokenIndex59
						}
						if !matchDot() {
							goto l53
						}
						goto l52
					l53:
						position, tokenIndex = position53, tokenIndex53
					}
				}
			l50:
				add(ruleListOperandItem, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 11 VectorOperand <- <('(' VectorOperandItem (',' VectorOperandItem)* ')')> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				if buffer[position] != rune('(') {
					goto l64
				}
				position++
				if !_rules[ruleVectorOperandItem]() {
					goto l64
				}
			l66:
				{
					position67, tokenIndex67 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l67
					}
					position++
					if !_rules[ruleVectorOperandItem]() {
						goto l67
					}
					goto l66
				l67:
					position, tokenIndex = position67, tokenIndex67
				}
				if buffer[position] != rune(')') {
					goto l64
				}
				position++
				add(ruleVectorOperand, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 12 VectorOperandItem <- <(QuotedString / (!(',' / ')' / '&' / '=') .)+)> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					if !_rules[ruleQuotedString]() {
						goto l71
					}
					goto l70
				l71:
					position, tokenIndex = position70, tokenIndex70
					{
						position74, tokenIndex74 := position, tokenIndex
						{
							position75, tokenIndex75 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l76
							}
							position++
							goto l75
						l76:
							position, tokenIndex = position75, tokenIndex75
							if buffer[position] != rune(')') {
								goto l77
							}
							position++
							goto l75
						l77:
							position, tokenIndex = position75, tokenIndex75
							if buffer[position] != rune('&') {
								goto l78
							}
							position++
							goto l75
						l78:
							position, tokenIndex = position75, tokenIndex75
							if buffer[position] != rune('=') {
								goto l74
							}
							position++
						}
					l75:
						goto l68
					l74:
						position, tokenIndex = position74, tokenIndex74
					}
					if !matchDot() {
						goto l68
					}
				l72:
					{
						position73, tokenIndex73 := position, tokenIndex
						{
							position79, tokenIndex79 := position, tokenIndex
							{
								position80, tokenIndex80 := position, tokenIndex
								if buffer[position] != rune(',') {
									goto l81
								}
								position++
								goto l80
							l81:
								position, tokenIndex = position80, tokenIndex80
								if buffer[position] != rune(')') {
									goto l82
								}
								position++
								goto l80
							l82:
								position, tokenIndex = position80, tokenIndex80
								if buffer[position] != rune('&') {
									goto l83
								}
								position++
								goto l80
							l83:
								position, tokenIndex = position80, tokenIndex80
								if buffer[position] != rune('=') {
									goto l79
								}
								position++
							}
						l80:
							goto l73
						l79:
							position, tokenIndex = position79, tokenIndex79
						}
						if !matchDot() {
							goto l73
						}
						goto l72
					l73:
						position, tokenIndex = position73, tokenIndex73
					}
				}
			l70:
				add(ruleVectorOperandItem, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 13 QuotedString <- <('"' (EscapedChar / (!('"' / '&' / '=') .))* '"')> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if buffer[position] != rune('"') {
					goto l84
				}
				position++
			l86:
				{
					position87, tokenIndex87 := position, tokenIndex
					{
						position88, tokenIndex88 := position, tokenIndex
						if !_rules[ruleEscapedChar]() {
							goto l89
						}
						goto l88
					l89:
						position, tokenIndex = position88, tokenIndex88
						{
							position90, tokenIndex90 := position, tokenIndex
							{
								position91, tokenIndex91 := position, tokenIndex
								if buffer[position] != rune('"') {
									goto l92
								}
								position++
								goto l91
							l92:
								position, tokenIndex = position91, tokenIndex91
								if buffer[position] != rune('&') {
									goto l93
								}
								position++
								goto l91
							l93:
								position, tokenIndex = position91, tokenIndex91
								if buffer[position] != rune('=') {
									goto l90
								}
								position++
							}
						l91:
							goto l87
						l90:
							position, tokenIndex = position90, tokenIndex90
						}
						if !matchDot() {
							goto l87
						}
					}
				l88:
					goto l86
				l87:
					position, tokenIndex = position87, tokenIndex87
				}
				if buffer[position] != rune('"') {
					goto l84
				}
				position++
				add(ruleQuotedString, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 14 EscapedChar <- <('\\' .)> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				if buffer[position] != rune('\\') {
					goto l94
				}
				position++
				if !matchDot() {
					goto l94
				}
				add(ruleEscapedChar, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 15 ScalarOperand <- <(!('&' / '=') .)+> */
		func() bool {
			position96, tokenIndex96 := position, tokenIndex
			{
				position97 := position
				{
					position100, tokenIndex100 := position, tokenIndex
					{
						position101, tokenIndex101 := position, tokenIndex
						if buffer[position] != rune('&') {
							goto l102
						}
						position++
						goto l101
					l102:
						position, tokenIndex = position101, tokenIndex101
						if buffer[position] != rune('=') {
							goto l100
						}
						position++
					}
				l101:
					goto l96
				l100:
					position, tokenIndex = position100, tokenIndex100
				}
				if !matchDot() {
					goto l96
				}
			l98:
				{
					position99, tokenIndex99 := position, tokenIndex
					{
						position103, tokenIndex103 := position, tokenIndex
						{
							position104, tokenIndex104 := position, tokenIndex
							if buffer[position] != rune('&') {
								goto l105
							}
							position++
							goto l104
						l105:
							position, tokenIndex = position104, tokenIndex104
							if buffer[position] != rune('=') {
								goto l103
							}
							position++
						}
					l104:
						goto l99
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
					if !matchDot() {
						goto l99
					}
					goto l98
				l99:
					position, tokenIndex = position99, tokenIndex99
				}
				add(ruleScalarOperand, position97)
			}
			return true
		l96:
			position, tokenIndex = position96, tokenIndex96
			return false
		},
		/* 16 END <- <!.> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				{
					position108, tokenIndex108 := position, tokenIndex
					if !matchDot() {
						goto l108
					}
					goto l106
				l108:
					position, tokenIndex = position108, tokenIndex108
				}
				add(ruleEND, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
	}
	p.rules = _rules
	return nil
}
